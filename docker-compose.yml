---
version: '3.8'
services:
# Kafka Cluster Services
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on: 
      - kafka
      - schemaregistry
      - zookeeper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry:8085
      DYNAMIC_CONFIG_ENABLED: 'true'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "29093:29093"
      - "9998:9998"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL_SAME_HOST://:9092, EXTERNAL_DIFFERENT_HOST://:29093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL_SAME_HOST://localhost:9092,EXTERNAL_DIFFERENT_HOST://192.168.68.30:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT,EXTERNAL_DIFFERENT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schemaregistry:
    image: confluentinc/cp-schema-registry:latest
    ports:
      - 8085:8085
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: http://schemaregistry:8085

      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

  # Generate random orders and send them to kafka
  app_producer:
    build: ./pizza_app/producer
    environment:
      MIN_TIME_BTW_MSGS: 2
      MAX_TIME_BTW_MSGS: 8
      KAFKA_SERVER: kafka:29092
      APP_TOPIC: pizza-orders
    depends_on:
      - kafka
      - zookeeper
      - schemaregistry
    
  # Web interface to see the pizza orders in real time
  app_consumer:
    build: ./pizza_app/consumer
    environment:
      KAFKA_SERVER: kafka:29092
      APP_TOPIC: pizza-orders
    ports:
      - 3000:3000
    depends_on:
      - kafka
      - zookeeper
      - schemaregistry
      - app_producer
      - pizza_order_processing
  
  pizza_order_processing:
    build: ./pizza_app/pizzaorderprocessing
    environment:
      KAFKA_SERVER: kafka:29092
      SCHEMA_REGISTRY_URL: http://schemaregistry:8085
      APP_TOPIC: pizza-orders
    depends_on:
      - kafka
      - zookeeper
      - schemaregistry
      - app_producer